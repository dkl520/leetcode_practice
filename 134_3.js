function canCompleteCircuit(gas, cost) {
    // total_tank 用于记录总的油量与消耗量的差值
    let total_tank = 0; 
    // curr_tank 用于记录当前油箱的油量
    let curr_tank = 0; 
    // start_station 记录起始加油站的索引
    let start_station = 0; 
    
    // 遍历每个加油站
    for (let i = 0; i < gas.length; i++) {
        // 更新总油量和总消耗量的差值
        total_tank += gas[i] - cost[i];
        // 更新当前油量
        curr_tank += gas[i] - cost[i];
        
        // 如果当前油量小于 0，说明无法从当前加油站出发到达下一个加油站
        if (curr_tank < 0) {
            // 更新起始加油站为下一个加油站
            start_station = i + 1;
            // 重置当前油量为 0
            curr_tank = 0;
        }
    }
    
    // 如果总油量大于等于 0，返回起始加油站索引，否则返回 -1
    return total_tank >= 0 ? start_station : -1;
}
// 代码解释
// 变量说明：

// total_tank：用于计算所有加油站的油量和消耗量的总差值，判断是否能完成一圈。
// curr_tank：用于计算从当前加油站出发到达下一个加油站时的油量。
// start_station：记录可以作为起始站的加油站索引。
// 逻辑流程：

// 遍历每个加油站，计算总油量和当前油量。
// 如果当前油量不足以到达下一个加油站，则更新起始加油站为下一个加油站，并重置当前油量。
// 最后，检查总油量是否为正，以决定是否可以完成一圈。
// 这样的注释可以帮助理解代码的逻辑和目的。





// 这段代码解决的是 加油站问题（Gas Station Problem），具体而言，它是一个典型的 循环路径问题，
// 描述的是在一系列加油站之间行驶时，是否能够找到一个起始加油站，使得车可以绕一圈回来而不耗尽油量。

// 问题描述
// 假设有 n 个加油站，分别位于一个环形路线的各个位置。每个加油站 i 提供 gas[i] 单位的油，
// 同时前往下一个加油站的消耗为 cost[i] 单位的油。任务是找到一个起始加油站的索引，如果可以从这个站出发，
// 最终绕一圈回到起始站而不耗尽油量，则返回该站的索引；如果无法完成，则返回 -1。

// 关键点
// 环形路线：从最后一个加油站回到第一个加油站。
// 油量的计算：每个加油站提供的油量减去前往下一个加油站的油耗量。
// 起始站的选择：如果在某个加油站出发无法到达下一个加油站，则必须从下一个加油站重新尝试。